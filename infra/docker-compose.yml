# docker-compose.yml
name: cresceja

services:
  postgres:
    image: postgres:16-alpine
    container_name: cresceja-postgres
    environment:
      POSTGRES_USER: cresceja
      POSTGRES_PASSWORD: cresceja123
      POSTGRES_DB: cresceja_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cresceja -d cresceja_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: cresceja-redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"        # útil para debug local; remova se não quiser expor
    healthcheck:
      # redis-cli já vem na imagem oficial redis:alpine
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  backend:
    container_name: cresceja-backend
    build:
      context: ../backend              # partindo do diretório infra/
      dockerfile: Dockerfile
    env_file:
      - ../backend/.env.docker         # defina DATABASE_URL e REDIS_URL aqui
    environment:
      NODE_ENV: production
      PORT: "4000"
      # Se o backend faz CORS, mantenha as origins separadas por vírgula
      CORS_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads
    ports:
      - "4000:4000"
    restart: unless-stopped

  worker:
    container_name: cresceja-worker
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: ["node", "queues/repurpose.worker.js"]
    env_file:
      - ../backend/.env.docker
    environment:
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  social-worker:
    container_name: cresceja-social-worker
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: ["node", "queues/social.worker.js"]
    env_file:
      - ../backend/.env.docker
    environment:
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  transcribe-worker:
    container_name: cresceja-transcribe-worker
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: ["node", "queues/content.worker.js"]   # <-- ajustar para este nome/arquivo
    env_file:
      - ../backend/.env.docker
    environment:
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
  uploads:
