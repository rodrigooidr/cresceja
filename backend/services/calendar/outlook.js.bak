
const msal = require('@azure/msal-node');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { Client } = require('pg');
const config = {
  auth: {
    clientId: process.env.AZURE_CLIENT_ID,
    authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
    clientSecret: process.env.AZURE_CLIENT_SECRET,
  }
};
const msalClientApp = new msal.ConfidentialClientApplication(config);
async function saveTokens(userId, tokens){
  const client = new Client({ connectionString: process.env.DATABASE_URL });
  await client.connect();
  try{
    await client.query(
      `INSERT INTO calendar_integrations (user_id, provider, tokens) 
       VALUES ($1,'outlook',$2)
       ON CONFLICT (user_id, provider) DO UPDATE SET tokens=$2, updated_at=NOW()`,
      [userId, tokens]
    );
  }finally{ await client.end(); }
}
async function getTokens(userId){
  const client = new Client({ connectionString: process.env.DATABASE_URL });
  await client.connect();
  try{
    const r = await client.query(\`SELECT tokens FROM calendar_integrations WHERE user_id=$1 AND provider='outlook'\`, [userId]);
    return r.rows[0]?.tokens || null;
  }finally{ await client.end(); }
}
function getAuthUrl(state){
  const params = new URLSearchParams({
    client_id: process.env.AZURE_CLIENT_ID,
    response_type: 'code',
    redirect_uri: process.env.AZURE_REDIRECT_URI,
    response_mode: 'query',
    scope: 'offline_access Calendars.ReadWrite User.Read',
    state
  });
  return `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}/oauth2/v2.0/authorize?${params.toString()}`;
}
async function handleCallback(code, userId){
  const tokenRequest = { code, scopes: ['offline_access', 'Calendars.ReadWrite', 'User.Read'], redirectUri: process.env.AZURE_REDIRECT_URI };
  const resp = await msalClientApp.acquireTokenByCode(tokenRequest);
  await saveTokens(userId, resp);
  return { ok:true };
}
async function createEvent(userId, { subject, start, end }){
  const tokens = await getTokens(userId);
  if(!tokens?.accessToken) return { ok:false, error:'not_connected' };
  const resFb = await fetch('https://graph.microsoft.com/v1.0/me/calendar/getSchedule', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${tokens.accessToken}`, 'Content-Type': 'application/json' },
    body: JSON.stringify({
      schedules: ['me'],
      startTime: { dateTime: new Date(start).toISOString(), timeZone: 'UTC' },
      endTime: { dateTime: new Date(end).toISOString(), timeZone: 'UTC' },
      availabilityViewInterval: 30
    })
  });
  const fb = await resFb.json();
  if(fb?.value?.[0]?.scheduleItems?.length) return { ok:false, error:'conflict', busy: fb.value[0].scheduleItems };
  const res = await fetch('https://graph.microsoft.com/v1.0/me/events', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${tokens.accessToken}`, 'Content-Type': 'application/json' },
    body: JSON.stringify({
      subject,
      start: { dateTime: new Date(start).toISOString(), timeZone: 'UTC' },
      end: { dateTime: new Date(end).toISOString(), timeZone: 'UTC' }
    })
  });
  if(!res.ok) return { ok:false, error: 'create_failed' };
  return { ok:true };
}
module.exports = { getAuthUrl, handleCallback, createEvent };
